package verkehrschaos;


/**
* verkehrschaos/StreetsPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from verkehrschaos.idl
* Freitag, 17. April 2015 12:12 Uhr MESZ
*/

public abstract class StreetsPOA extends org.omg.PortableServer.Servant
 implements verkehrschaos.StreetsOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("claim", new java.lang.Integer (0));
    _methods.put ("free", new java.lang.Integer (1));
    _methods.put ("getLocations", new java.lang.Integer (2));
    _methods.put ("getTruckCompanyByName", new java.lang.Integer (3));
    _methods.put ("getTruckCompanyByLocation", new java.lang.Integer (4));
    _methods.put ("start", new java.lang.Integer (5));
    _methods.put ("remove", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /* Spedition siedelt sich am angegebenen Ort an. */
       case 0:  // verkehrschaos/Streets/claim
       {
         try {
           verkehrschaos.TruckCompany company = verkehrschaos.TruckCompanyHelper.read (in);
           String location = in.read_string ();
           this.claim (company, location);
           out = $rh.createReply();
         } catch (verkehrschaos.ELocationNotFound $ex) {
           out = $rh.createExceptionReply ();
           verkehrschaos.ELocationNotFoundHelper.write (out, $ex);
         } catch (verkehrschaos.ELocationInUse $ex) {
           out = $rh.createExceptionReply ();
           verkehrschaos.ELocationInUseHelper.write (out, $ex);
         }
         break;
       }


  /* Spedition am angegebenen Ort wird aufgegeben. Ort steht nun fuer andere Spedition zur Verfuegung. */
       case 1:  // verkehrschaos/Streets/free
       {
         try {
           String location = in.read_string ();
           this.free (location);
           out = $rh.createReply();
         } catch (verkehrschaos.ELocationNotFound $ex) {
           out = $rh.createExceptionReply ();
           verkehrschaos.ELocationNotFoundHelper.write (out, $ex);
         }
         break;
       }


  /* Gibt die Namen aller Orte, an denen sich eine Spedition ansiedeln kann  */
       case 2:  // verkehrschaos/Streets/getLocations
       {
         String $result[] = null;
         $result = this.getLocations ();
         out = $rh.createReply();
         verkehrschaos.TLocationListHelper.write (out, $result);
         break;
       }


  /* Durchsucht die Liste der angesiedelten Speditionen. */
       case 3:  // verkehrschaos/Streets/getTruckCompanyByName
       {
         try {
           String companyname = in.read_string ();
           verkehrschaos.TruckCompany $result = null;
           $result = this.getTruckCompanyByName (companyname);
           out = $rh.createReply();
           verkehrschaos.TruckCompanyHelper.write (out, $result);
         } catch (verkehrschaos.ETruckCompanyUnknown $ex) {
           out = $rh.createExceptionReply ();
           verkehrschaos.ETruckCompanyUnknownHelper.write (out, $ex);
         }
         break;
       }


  /* Gibt die Spedition, die sich an einem Ort angesiedelt hat. */
       case 4:  // verkehrschaos/Streets/getTruckCompanyByLocation
       {
         try {
           String location = in.read_string ();
           verkehrschaos.TruckCompany $result = null;
           $result = this.getTruckCompanyByLocation (location);
           out = $rh.createReply();
           verkehrschaos.TruckCompanyHelper.write (out, $result);
         } catch (verkehrschaos.ELocationNotInUse $ex) {
           out = $rh.createExceptionReply ();
           verkehrschaos.ELocationNotInUseHelper.write (out, $ex);
         } catch (verkehrschaos.ELocationNotFound $ex) {
           out = $rh.createExceptionReply ();
           verkehrschaos.ELocationNotFoundHelper.write (out, $ex);
         }
         break;
       }


  /* Startet einen LKW.
       * Startort ergibt sich aus der Spedition, die dem LKW zugeordnet ist.
       * Zielspedition wird explizit angegeben.
       * Aufruf bewirkt, dass der LKW der  Zielspedition angekuendigt wird (advice).
       * Damit ist die Zielspedition die dem LKW zugeordnete Spedition:
       * Zielspedition ruft setCompany vom LKW auf.
       * Zielspedition darf aber erst dann ueber den LKW verfuegen, wenn dieser dort angekommen ist (arrive).
       * LKW setzt sich sofort in Bewegung. Er bekommt seine aktuelle Position staendig mitgeteilt (setCoordinate).
       */
       case 5:  // verkehrschaos/Streets/start
       {
         try {
           verkehrschaos.Truck truck = verkehrschaos.TruckHelper.read (in);
           verkehrschaos.TruckCompany to = verkehrschaos.TruckCompanyHelper.read (in);
           this.start (truck, to);
           out = $rh.createReply();
         } catch (verkehrschaos.ETruckCompanyUnknown $ex) {
           out = $rh.createExceptionReply ();
           verkehrschaos.ETruckCompanyUnknownHelper.write (out, $ex);
         }
         break;
       }


  /* Entfernt einen LKW, der gerade unterwegs ist.
       * Der LKW verschwindet unmittelbar von der Karte.
       * Er darf keiner Spedition mehr zugeordnet sein.
       */
       case 6:  // verkehrschaos/Streets/remove
       {
         verkehrschaos.Truck truck = verkehrschaos.TruckHelper.read (in);
         this.remove (truck);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:verkehrschaos/Streets:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Streets _this() 
  {
    return StreetsHelper.narrow(
    super._this_object());
  }

  public Streets _this(org.omg.CORBA.ORB orb) 
  {
    return StreetsHelper.narrow(
    super._this_object(orb));
  }


} // class StreetsPOA
