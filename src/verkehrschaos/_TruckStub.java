package verkehrschaos;


/**
* verkehrschaos/_TruckStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from verkehrschaos.idl
* Freitag, 17. April 2015 12:12 Uhr MESZ
*/

public class _TruckStub extends org.omg.CORBA.portable.ObjectImpl implements verkehrschaos.Truck
{


  /* Gibt den Namen des LKWs. */
  public String getName ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getName", true);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getName (        );
            } finally {
                _releaseReply ($in);
            }
  } // getName


  /* Gibt die zugeordnete Spedition */
  public verkehrschaos.TruckCompany getCompany ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getCompany", true);
                $in = _invoke ($out);
                verkehrschaos.TruckCompany $result = verkehrschaos.TruckCompanyHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getCompany (        );
            } finally {
                _releaseReply ($in);
            }
  } // getCompany


  /* Neue Zuordnung einer Spedition.
       * Wird von der zustaendigen Spedition aufgerufen. 
       * Zu Debug-Zwecken soll der Name der neuen Spedition auf der Konsole ausgegeben werden. 
       */
  public void setCompany (verkehrschaos.TruckCompany company)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setCompany", true);
                verkehrschaos.TruckCompanyHelper.write ($out, company);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setCompany (company        );
            } finally {
                _releaseReply ($in);
            }
  } // setCompany


  /* Informiert den LKW waehrend einer Fahrt ueber die aktuelle Position.
       * Position kann auf der Konsole ausgegeben werden.
       * Wird von Streets aufgerufen.
       */
  public void setCoordinate (double x, double y)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setCoordinate", true);
                $out.write_double (x);
                $out.write_double (y);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setCoordinate (x, y        );
            } finally {
                _releaseReply ($in);
            }
  } // setCoordinate


  /*
       * Stilllegung des LKWs (LKW Anwendung wird beendet).
       * Wird z. B. von zugeordneter Spedition aufgerufen, wenn diese still gelegt wird
       * oder von der Steueranwendung (Client).
       * Beenden der Anwendung durch Aufruf von orb.shutdown(true).
       * Nach orb.shutdown kleine Pause einlegen (0.5 sec) um Exception zu vermeiden.
       */
  public void putOutOfService ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("putOutOfService", true);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                putOutOfService (        );
            } finally {
                _releaseReply ($in);
            }
  } // putOutOfService

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:verkehrschaos/Truck:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _TruckStub
